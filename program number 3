// student_mgmt.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define DBFILE "students.dat"
#define NAME_LEN 50

typedef struct {
    int id;
    char name[NAME_LEN];
    int age;
    float cgpa;
} Student;

void add_student() {
    FILE *fp = fopen(DBFILE, "ab");
    if (!fp) { perror("Open file"); return; }
    Student s;
    printf("Enter id: "); scanf("%d", &s.id);
    printf("Enter name: "); getchar(); fgets(s.name, NAME_LEN, stdin);
    s.name[strcspn(s.name, "\n")] = '\0';
    printf("Enter age: "); scanf("%d", &s.age);
    printf("Enter CGPA: "); scanf("%f", &s.cgpa);
    fwrite(&s, sizeof(Student), 1, fp);
    fclose(fp);
    printf("Student added.\n");
}

void display_students() {
    FILE *fp = fopen(DBFILE, "rb");
    if (!fp) { printf("No records found.\n"); return; }
    Student s;
    printf("\nAll Students:\n");
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        printf("ID: %d\nName: %s\nAge: %d\nCGPA: %.2f\n---\n", s.id, s.name, s.age, s.cgpa);
    }
    fclose(fp);
}

void search_student() {
    int id;
    printf("Enter ID to search: "); scanf("%d", &id);
    FILE *fp = fopen(DBFILE, "rb");
    if (!fp) { printf("No records.\n"); return; }
    Student s;
    int found = 0;
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        if (s.id == id) {
            printf("Found:\nID: %d\nName: %s\nAge: %d\nCGPA: %.2f\n", s.id, s.name, s.age, s.cgpa);
            found = 1; break;
        }
    }
 if (!found) printf("Record not found.\n");
    fclose(fp);
}

void update_student() {
    int id;
    printf("Enter ID to update: "); scanf("%d", &id);
    FILE *fp = fopen(DBFILE, "r+b");
    if (!fp) { printf("No records.\n"); return; }
    Student s;
    int found = 0;
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        if (s.id == id) {
            found = 1;
            printf("Current Name: %s\nEnter new name (or ENTER to keep): ", s.name);
            getchar();
            char tmp[NAME_LEN];
            fgets(tmp, NAME_LEN, stdin);
            if (tmp[0] != '\n') {
                tmp[strcspn(tmp, "\n")] = '\0';
                strncpy(s.name, tmp, NAME_LEN);
            }
            printf("Current Age: %d\nEnter new age (0 to keep): ", s.age);
            int newage; scanf("%d", &newage);
            if (newage != 0) s.age = newage;
            printf("Current CGPA: %.2f\nEnter new CGPA (negative to keep): ", s.cgpa);
            float newcgpa; scanf("%f", &newcgpa);
 if (newcgpa >= 0) s.cgpa = newcgpa;
            fseek(fp, - (long)sizeof(Student), SEEK_CUR);
            fwrite(&s, sizeof(Student), 1, fp);
            printf("Record updated.\n");
            break;
        }
    }
    if (!found) printf("Record not found.\n");
    fclose(fp);
}

void delete_student() {
    int id;
    printf("Enter ID to delete: "); scanf("%d", &id);
    FILE *fp = fopen(DBFILE, "rb");
    if (!fp) { printf("No records.\n"); return; }
    FILE *tmp = fopen("tmp.dat", "wb");
    if (!tmp) { fclose(fp); perror("tmp file"); return; }
    Student s;
    int found = 0;
    while (fread(&s, sizeof(Student), 1, fp) == 1) {
        if (s.id == id) {
            found = 1; // skip writing => deletion
        } else {
            fwrite(&s, sizeof(Student), 1, tmp);
        }
}
    fclose(fp); fclose(tmp);
    remove(DBFILE);
    rename("tmp.dat", DBFILE);
    if (found) printf("Record deleted.\n"); else printf("Record not found.\n");
}

int main() {
    int choice;
    while (1) {
        printf("\nStudent Management Menu:\n");
        printf("1. Add student\n2. Display all\n3. Search by ID\n4. Update by ID\n5. Delete by ID\n6. Exit\nChoose: ");
        if (scanf("%d", &choice) != 1) break;
        switch (choice) {
            case 1: add_student(); break;
            case 2: display_students(); break;
            case 3: search_student(); break;
            case 4: update_student(); break;
            case 5: delete_student(); break;
            case 6: printf("Exiting.\n"); exit(0);
            default: printf("Invalid choice.\n");
        }
    }
    return 0;
}
